[% var project = ProjectContext.all.first(); %]
# [%= project.artifactId %]

REST API generated with MDE Backend Generator.

## Stack

- Java [%= project.javaVersion %] + Spring Boot [%= project.springBootVersion %]
- [%= project.databaseType.toUpperCase() %] database
- Docker Compose ready

## Quick Start

```bash
docker compose up -d --build
```

API available at: `http://localhost:8080`

## Entities

[% for (entity in project.entities) { %]
**[%= entity.className %]** ([%= entity.fields.size() %] fields[% if (entity.hasRelationships) { %], [%= entity.relations.size() %] relationships[% } %])  
[% } %]

## API Endpoints

All entities support standard CRUD operations:
- `POST /api/{entity}` - Create
- `GET /api/{entity}` - List all
- `GET /api/{entity}/{id}` - Get by ID
- `PUT /api/{entity}/{id}` - Update
- `DELETE /api/{entity}/{id}` - Delete

[% for (entity in project.entities) { %]
- `/api/[%= entity.tableName %]` - [%= entity.className %]
[% } %]

## Development

Start database only:
```bash
docker compose up -d [% if (project.databaseType.toLowerCase() = "postgresql") { %]postgres[% } else if (project.databaseType.toLowerCase() = "mysql") { %]mysql[% } %]
```

Run locally:
```bash
mvn spring-boot:run
```

Run tests:
```bash
mvn test
```

Stop services:
```bash
docker compose down -v
```
