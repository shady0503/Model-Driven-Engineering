package com.healthcare.system.HealthcareAPI.controller;

import com.healthcare.system.HealthcareAPI.entity.Prescriptions;
import com.healthcare.system.HealthcareAPI.service.PrescriptionsService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;


/**
 * REST Controller for Prescriptions entity
 * Generated by MDE Backend Generator
 */
@RestController
@RequestMapping("/api/prescriptions")
@CrossOrigin(origins = "*")
public class PrescriptionsController {

    private final PrescriptionsService service;

    public PrescriptionsController(PrescriptionsService service) {
        this.service = service;
    }

    /**
     * Create a new Prescriptions
     * POST /api/prescriptions
     */
    @PostMapping
    public ResponseEntity<Prescriptions> create(@RequestBody Prescriptions entity) {
        Prescriptions created = service.create(entity);
        return new ResponseEntity<>(created, HttpStatus.CREATED);
    }

    /**
     * Get Prescriptions by ID
     * GET /api/prescriptions/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<Prescriptions> getById(@PathVariable Integer id) {
        return service.findById(id)
                .map(entity -> new ResponseEntity<>(entity, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Get all Prescriptions entities
     * GET /api/prescriptions
     */
    @GetMapping
    public ResponseEntity<List<Prescriptions>> getAll() {
        List<Prescriptions> entities = service.findAll();
        return new ResponseEntity<>(entities, HttpStatus.OK);
    }

    /**
     * Update an existing Prescriptions
     * PUT /api/prescriptions/{id}
     */
    @PutMapping("/{id}")
    public ResponseEntity<Prescriptions> update(
            @PathVariable Integer id,
            @RequestBody Prescriptions entity) {
        try {
            Prescriptions updated = service.update(id, entity);
            return new ResponseEntity<>(updated, HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    /**
     * Delete Prescriptions by ID
     * DELETE /api/prescriptions/{id}
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Integer id) {
        if (!service.exists(id)) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        service.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
