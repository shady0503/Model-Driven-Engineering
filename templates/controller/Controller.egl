[* This template generates REST Controller classes *]
[% for (entity in EntityContext.all) { %]
package [%= entity.packageName.replace('.entity', '.controller') %];

import [%= entity.packageName %].[%= entity.className %];
import [%= entity.packageName.replace('.entity', '.service') %].[%= entity.className %]Service;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

[% var pkType = entity.primaryKey.javaType; %]

/**
 * REST Controller for [%= entity.className %] entity
 * Generated by MDE Backend Generator
 */
@RestController
@RequestMapping("/api/[%= entity.tableName %]")
@CrossOrigin(origins = "*")
public class [%= entity.className %]Controller {

    private final [%= entity.className %]Service service;

    public [%= entity.className %]Controller([%= entity.className %]Service service) {
        this.service = service;
    }

    /**
     * Create a new [%= entity.className %]
     * POST /api/[%= entity.tableName %]
     */
    @PostMapping
    public ResponseEntity<[%= entity.className %]> create(@RequestBody [%= entity.className %] entity) {
        [%= entity.className %] created = service.create(entity);
        return new ResponseEntity<>(created, HttpStatus.CREATED);
    }

    /**
     * Get [%= entity.className %] by ID
     * GET /api/[%= entity.tableName %]/{id}
     */
    @GetMapping("/{id}")
    public ResponseEntity<[%= entity.className %]> getById(@PathVariable [%= pkType %] id) {
        return service.findById(id)
                .map(entity -> new ResponseEntity<>(entity, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Get all [%= entity.className %] entities
     * GET /api/[%= entity.tableName %]
     */
    @GetMapping
    public ResponseEntity<List<[%= entity.className %]>> getAll() {
        List<[%= entity.className %]> entities = service.findAll();
        return new ResponseEntity<>(entities, HttpStatus.OK);
    }

    /**
     * Update an existing [%= entity.className %]
     * PUT /api/[%= entity.tableName %]/{id}
     */
    @PutMapping("/{id}")
    public ResponseEntity<[%= entity.className %]> update(
            @PathVariable [%= pkType %] id,
            @RequestBody [%= entity.className %] entity) {
        try {
            [%= entity.className %] updated = service.update(id, entity);
            return new ResponseEntity<>(updated, HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    /**
     * Delete [%= entity.className %] by ID
     * DELETE /api/[%= entity.tableName %]/{id}
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable [%= pkType %] id) {
        if (!service.exists(id)) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        service.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
[% } %]
